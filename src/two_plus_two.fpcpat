let type nat = rec[t.sum[l : prod[], r : t]] in
let (zero : nat) = fold (inj[l] {}) in
let (succ : nat -> nat) = fun n => fold (inj[r] n) in
let (plus : nat -> nat -> nat) = fix self is fun (fold x) => fun y =>
  match x with
  | inj[l] {} => y
  | inj[r] x => succ (self x y) end
in
let two = succ (succ zero) in
plus two two
